@inject NavigationManager NavigationManager
@using System.Text.Json
@using System.IO
@using lithuanian_language_learning_tool.Exceptions

<h3>Ar norite įkelti užduotis ar naudoti jau sukurtas?</h3>

<button class="btn btn-primary" @onclick="ShowUpload">Įkelti</button>
<button class="btn btn-secondary" @onclick="StartWithDefaultTasks">Naudoti egzistuojančias</button>

@if (showUpload)
{
    <InputFile OnChange="HandleFileSelected" />
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    [Parameter] public EventCallback<string> OnTaskUploaded { get; set; }
    [Parameter] public EventCallback OnUseDefaultTasks { get; set; }      

    private bool showUpload = false;
    private string fileName;
    private string errorMessage = "";
    private string taskType = "";

    protected override void OnInitialized()
    {
        SetTaskTypeBasedOnUrl();
    }

    private void SetTaskTypeBasedOnUrl()
    {
        var uri = NavigationManager.Uri.ToLower();
        if ((uri.Contains("/rasybos/uzduotys")) || (uri.Contains("/rasybos/pasirinkimai/temos")) || (uri.Contains("/rasybos/pasirinkimai/randomizuoti")))
        {
            taskType = "punctuation";
        }
        else if ((uri.Contains("/skyrybos/uzduotys")) || (uri.Contains("/skyrybos/pasirinkimai/temos")) || (uri.Contains("/skyrybos/pasirinkimai/uzduotys")))
        {
            taskType = "spelling";
        }
    }

    private void ShowUpload()
    {
        showUpload = true;
        errorMessage = "";
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            fileName = file.Name;
            var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var fileContent = await reader.ReadToEndAsync();

            if (string.IsNullOrWhiteSpace(fileContent))
            {
                throw new lithuanian_language_learning_tool.Exceptions.TaskUploadException("Įkelto failo turinys yra tuščias.");
            }

            ValidateJsonStructure(fileContent, taskType);
            await OnTaskUploaded.InvokeAsync(fileContent);
            errorMessage = "";
        }
        catch (lithuanian_language_learning_tool.Exceptions.TaskUploadException ex)
        {
            errorMessage = $"Klaida įkeliant failą: {ex.Message}";
            LogException(ex);
        }
        catch (Exception ex)
        {
            errorMessage = $"Nenumatyta klaida: {ex.Message}";
            LogException(ex);
        }
    }

    private void LogException(Exception ex)
    {
        var logPath = Path.Combine("logs", "errors.log");
        Directory.CreateDirectory("logs");
        
        using var writer = new StreamWriter(logPath, append: true);
        writer.WriteLine($"[{DateTime.Now}] {ex.Message}");
        writer.WriteLine(ex.StackTrace);
        writer.WriteLine("--------------------------------------------------");
    }

    private void ValidateJsonStructure(string jsonContent, string taskType)
    {
        try
        {
            var tasks = JsonSerializer.Deserialize<List<Dictionary<string, object>>>(jsonContent);

            if (tasks == null || tasks.Count == 0)
                throw new TaskUploadException("Failas neturi užduočių arba yra tuščias.");

            foreach (var task in tasks)
            {
                if (!task.ContainsKey("Sentence") || !task.ContainsKey("Options") || 
                    !task.ContainsKey("CorrectAnswer") || !task.ContainsKey("Explanation"))
                {
                    throw new TaskUploadException("Netinkama užduoties struktūra: trūksta laukų.");
                }

                // Tikriname "Options" lauką pagal užduoties tipą
                var options = JsonSerializer.Deserialize<List<string>>(task["Options"].ToString());
                if (options == null || options.Count == 0)
                {
                    throw new TaskUploadException("Options laukelis yra tuščias arba netinkamas.");
                }

                if (taskType == "punctuation")
                {
                    if (!options.All(opt => new[] { ".", ",", ";", ":", "!", "?" }.Contains(opt)))
                    {
                        throw new TaskUploadException("Netinkama Options struktūra: skyrybos užduotyse leidžiami tik skyrybos ženklai.");
                    }
                }
                else if (taskType == "spelling")
                {
                    if (!options.All(opt => opt.Length == 1 && char.IsLetter(opt[0])))
                    {
                        throw new TaskUploadException("Netinkama Options struktūra: rašybos užduotyse leidžiamos tik raidės.");
                    }
                }
            }
        }
        catch (JsonException)
        {
            throw new TaskUploadException("JSON failas yra netinkamai suformatuotas.");
        }
    }

    private async Task StartWithDefaultTasks()
    {
        await OnUseDefaultTasks.InvokeAsync();
    }
}
