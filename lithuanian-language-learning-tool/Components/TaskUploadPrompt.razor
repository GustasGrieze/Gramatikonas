@inject NavigationManager NavigationManager
@inject lithuanian_language_learning_tool.Services.IUploadService UploadService
@using System.Text.Json
@using System.IO
@using lithuanian_language_learning_tool.Exceptions

<h3>Ar norite įkelti užduotis ar naudoti jau sukurtas?</h3>

<button class="btn btn-primary" @onclick="ShowUpload">Įkelti</button>
<button class="btn btn-secondary" @onclick="StartWithDefaultTasks">Naudoti egzistuojančias</button>

@if (showUpload)
{
    <InputFile OnChange="HandleFileSelected" />
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    [Parameter] public EventCallback<string> OnTaskUploaded { get; set; }
    [Parameter] public EventCallback OnUseDefaultTasks { get; set; }

    private bool showUpload = false;
    private string fileName;
    private string errorMessage;
    public string TaskType { get; set; } = "";

    protected override void OnInitialized()
    {
        SetTaskTypeBasedOnUrl();
    }

    private void SetTaskTypeBasedOnUrl()
    {
        var uri = NavigationManager.Uri.ToLower();
        if ((uri.Contains("/rasybos/uzduotys")) || (uri.Contains("/rasybos/pasirinkimai/temos")) || (uri.Contains("/rasybos/pasirinkimai/randomizuoti")))
        {
            TaskType = "spelling"; 
        }
        else if ((uri.Contains("/skyrybos/uzduotys")) || (uri.Contains("/skyrybos/pasirinkimai/temos")) || (uri.Contains("/skyrybos/pasirinkimai/uzduotys")))
        {
            TaskType = "punctuation";
        }
    }

    private void ShowUpload()
    {
        showUpload = true;
        errorMessage = "";
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            fileName = file.Name;
            var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var fileContent = await reader.ReadToEndAsync();

            if (string.IsNullOrWhiteSpace(fileContent))
            {
                throw new TaskUploadException("Įkelto failo turinys yra tuščias.");
            }

            // Delegate validation to UploadService
            //UploadService.ValidateJsonStructure(fileContent, TaskType);

            await OnTaskUploaded.InvokeAsync(fileContent);
            errorMessage = "";
        }
        catch (TaskUploadException ex)
        {
            errorMessage = $"Klaida įkeliant failą: {ex.Message}";
            UploadService.LogException(ex);
        }
        catch (Exception ex)
        {
            errorMessage = $"Nenumatyta klaida: {ex.Message}";
            UploadService.LogException(ex);
        }
    }

    private async Task StartWithDefaultTasks()
    {
        await OnUseDefaultTasks.InvokeAsync();
    }


    private string FormatStudyTime(TimeSpan time)
    {
        if (time.TotalHours >= 1)
        {
            return $"{time.TotalHours:F1} hours";
        }
        return $"{time.TotalMinutes:F0} minutes";
    }
}
