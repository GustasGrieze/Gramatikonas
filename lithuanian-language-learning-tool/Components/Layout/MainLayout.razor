@inherits LayoutComponentBase
@inject NavigationManager Navigation
@using lithuanian_language_learning_tool.Services
@using lithuanian_language_learning_tool.Models
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div class="menubar">
        <NavMenu />
    </div>
    <main>
        
        <div style="display: flex; justify-content: center;">

            <!-- Empty container for allignment -->
            @if (Navigation.Uri == Navigation.BaseUri)
            {
                <div style="width: 400px; margin: 50px auto"></div>
            }

            <!-- Main content container -->
            <div class="container">
                <div class="card">
                    <img src="bookmark.png" width="90" style="position: absolute; top: 0; left: 0; transform: translate(10%, -35%)"/>
                    <div style="position: absolute; top: 10px; left: 53px; font-size: 1.5rem; font-weight: bold; color: white; text-shadow: 1px 1px 2px black; transform: translate(-50%, -50%);">
                        @(_user?.CurrentStreak ?? 0)
                    </div>
                    <main role="main" class="pb-3">
                        @Body
                    </main>
                </div>
            </div>

            <!-- Leaderboard container -->
            @if (Navigation.Uri == Navigation.BaseUri)
            {
                <div class="container" style="width: 400px; height: fit-content">
                    <div class="card">
                            <Leaderboard />
                    </div>
                </div>
            }
        </div>
    </main>

    


    <footer class="border-top footer text-muted mt-4">
        <div class="container text-center">
            &copy; @DateTime.Now.Year - Gramatikonas -
        </div>
    </footer>
</div>


@code {
    public User? _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated ?? true)
        {
            // User is not authenticated
            _user = null;
        }
        else
        {
            // User is authenticated
            _user = await UserService.GetOrCreateUserFromGoogleAsync(authState);
        }
    }

    private string FormatStudyTime(TimeSpan time)
    {
        if (time.TotalHours >= 1)
        {
            return $"{time.TotalHours:F1} valandų";
        }
        return $"{time.TotalMinutes:F0} minučių";
    }
}