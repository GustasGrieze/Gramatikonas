@page "/punctuationtask"

<div class="container">
    @if (!showSummary)
    {
        <h1>Skyrybos Užduotis</h1>

        <div class="task-box" style="height: 300px;">
            <textarea @bind="userText" class="edit-textarea"></textarea>
        </div>

        @if (isCorrect)
        {
            <button class="next-button" @onclick="NextTask">Kita užduotis</button>
        }
        else
        {
            <button class="next-button" @onclick="CheckPunctuation">Pateikti</button>
            <button class="next-button" @onclick="SkipTask">Praleisti</button>
        }

        <div class="feedback">
            @if (feedbackMessage != null)
            {
                <p class="@feedbackClass">@feedbackMessage</p>
            }
        </div>
    }
    else
    {
        <h1>Užduoties apžvalga</h1>
        <p>Atlikai visas užduotis</p>
        <p>Teisingi atsakymai: @correctAnswersCount / @tasks.Count</p>
        
        <!-- "Bandyti dar kartą" button to restart the tasks -->
        <button class="next-button" @onclick="RestartTasks">Bandyti dar kartą</button>
    }
</div>

@code {

    private List<global::Task> tasks = new List<global::Task>
    {
        new global::Task
        {
            Sentence = "Vilnius Lietuvos sostinė yra vienas seniausių Europos miestų...",
            Options = new List<string> {".", ",", ";", ":", "!", "?"},
            CorrectAnswer = "Vilnius, Lietuvos sostinė, yra vienas seniausių Europos miestų..."
        },
        new global::Task
        {
            Sentence = "Petriukas surado piniginę kuri neturėjo jokių pinigų.",
            Options = new List<string> {".", ",", ";", ":", "!", "?"},
            CorrectAnswer = "Petriukas surado piniginę, kuri neturėjo jokių pinigų."
        },
        new global::Task
        {
            Sentence = "Išeidamas sutikau labai malonų žmogų kuris turėjo žaizdą ant veido.",
            Options = new List<string> {".", ",", ";", ":", "!", "?"},
            CorrectAnswer = "Išeidamas sutikau labai malonų žmogų, kuris turėjo žaizdą ant veido."
        }
    };

    private int currentTaskIndex = 0;
    private string? userText;
    private string? feedbackMessage;
    private string feedbackClass = "";
    private bool isCorrect = false;
    private int correctAnswersCount = 0;
    private bool showSummary = false;

    // Initialize the first task
    protected override void OnInitialized()
    {
        //userText = tasks[currentTaskIndex];
        userText = tasks[currentTaskIndex].Sentence;
    }

    // Method to check user punctuation
    private void CheckPunctuation()
    {


        string userPunctuation = ExtractPunctuation(userText);
        string correctPunctuation = ExtractPunctuation(tasks[currentTaskIndex].CorrectAnswer);

        if (userPunctuation == correctPunctuation)
        {
            feedbackMessage = "Puiku! Visi skyrybos ženklai teisingi.";
            feedbackClass = "correct";
            isCorrect = true;
            correctAnswersCount++;
        }
        else
        {
            feedbackMessage = "Neteisingai! Bandykite dar kartą.";
            feedbackClass = "incorrect";
            isCorrect = false;
        }
    }

    // Move to the next task
    private void NextTask()
    {
        if (currentTaskIndex < tasks.Count - 1)
        {
            currentTaskIndex++;
            userText = tasks[currentTaskIndex].Sentence;
            feedbackMessage = null;
            isCorrect = false;
        }
        else
        {
            showSummary = true; // Show summary when all tasks are completed
        }
    }

    // Skip the current task
    private void SkipTask()
    {
        if (currentTaskIndex < tasks.Count - 1)
        {
            currentTaskIndex++;
            userText = tasks[currentTaskIndex].Sentence;
            feedbackMessage = null;
            isCorrect = false;
        }
        else
        {
            showSummary = true; // Show summary when all tasks are completed
        }
    }

    // Restart tasks from the beginning
    private void RestartTasks()
    {
        currentTaskIndex = 0;
        correctAnswersCount = 0;
        userText = tasks[currentTaskIndex].Sentence;
        feedbackMessage = null;
        isCorrect = false;
        showSummary = false;
    }

    // Helper method to extract punctuation marks from the text
    private string ExtractPunctuation(string text)
    {
        var punctuationMarks = tasks[currentTaskIndex].Options;
        return new string(text.Where(c => punctuationMarks.Contains(c.ToString())).ToArray());
    }
}
