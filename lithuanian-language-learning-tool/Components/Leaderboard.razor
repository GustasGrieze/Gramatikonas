@using lithuanian_language_learning_tool.Services;
@using lithuanian_language_learning_tool.Models;
@inject IUserService UserService

<h2>Leaderboard</h2>
<div>
    @if (leaderboard != null && leaderboard.Any())
    {
        <table style="width: 100%; border-collapse: collapse; text-align: left;">
            <thead>
                <tr style="background-color: none; border-bottom: 2px solid #ccc;">
                    <th style="padding: 10px; width: 10%;">Rank</th>
                    <th style="padding: 10px; width: 45%;">Name</th>
                    <th style="padding: 10px; width: 45%;">High Score</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < leaderboard.Count; ++i)
                {
                    User user = leaderboard[i];
                    <tr style="border-bottom: 1px solid #e0e0e0; background-color: @(i % 2 == 0 ? "#f9f9f9" : "#ffffff");">
                        <td style="padding: 10px; font-weight: bold;">@(i + 1)</td>
                        <td style="padding: 10px;">@user.DisplayName</td>
                        <td style="padding: 10px;">@user.HighScore</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Loading...</p>
    }

</div>

@code{

	private List<User>? leaderboard;

	protected override async Task OnInitializedAsync()
	{
		leaderboard = await UserService.GetTopUsersAsync(10);
	}
}
