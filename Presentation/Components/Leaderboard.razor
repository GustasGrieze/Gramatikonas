@using DataAccess.Services
@using DataAccess.Models
@inject IUserService UserService

<h2>Lyderių lentelė</h2>

<select style="  background-color: #43526e; border: 2px solid #2d3b55; color: #ffffff;" @onchange="(e) => UpdateLeaderboard(e.Value.ToString())">
    <option value="taskai">Taškai</option>
    <option value="streak">Dabartinis streak'as</option>
    <option value="bestStreak">Geriausias streak'as</option>
    <option value="totalLessons">Užduočių atlikta</option>
</select>

<div>
    @if (leaderboard != null && leaderboard.Any())
    {
        <table style="width: 100%; border-collapse: collapse; text-align: left;">
            <thead>
                <tr style="background-color: none; border-bottom: 2px solid #ccc;">
                    <th style="padding: 10px; width: 10%;">Vieta</th>
                    <th style="padding: 10px; width: 45%;">Vardas</th>
                    <th style="padding: 10px; width: 45%;">@SelectedColumnName</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < leaderboard.Count; ++i)
                {
                    User user = leaderboard[i];
                    <tr style="border-bottom: 1px solid #e0e0e0; background-color: @(i % 2 == 0 ? "#f9f9f9" : "#ffffff");">
                        <td style="padding: 10px; font-weight: bold;">@(i + 1)</td>
                        <td style="padding: 10px;">@user.DisplayName</td>
                        <td style="padding: 10px;">
                            @if (SelectedFilter == "taskai") { @user.HighScore }
                            else if (SelectedFilter == "streak") { @user.CurrentStreak }
                            else if (SelectedFilter == "bestStreak") { @user.BestStreak }
                            else if (SelectedFilter == "totalLessons") { @user.TotalLessonsCompleted }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    private List<User>? leaderboard;
    private string SelectedFilter = "taskai"; // Default filter
    private string SelectedColumnName = "Taškai"; // Default column name

    protected override async Task OnInitializedAsync()
    {
        await UpdateLeaderboard("taskai"); // Default load
    }

    private async Task UpdateLeaderboard(string filter)
    {
        SelectedFilter = filter;
        SelectedColumnName = filter switch
        {
            "taskai" => "Taškai",
            "streak" => "Dabartinis streak'as",
            "bestStreak" => "Geriausias streak'as",
            "totalLessons" => "Užduočių atlikta",
            _ => "Taškai"
        };

        leaderboard = filter switch
        {
            "taskai" => await UserService.GetTopUsersByHighScoreAsync(),
            "streak" => await UserService.GetTopUsersByCurrentStreakAsync(),
            "bestStreak" => await UserService.GetTopUsersByBestStreakAsync(),
            "totalLessons" => await UserService.GetTopUsersByLessonsCompletedAsync(),
            _ => await UserService.GetTopUsersByHighScoreAsync()
        };
    }
}
